<!DOCTYPE html>
<html lang="tr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Namaz Vakitleri</title>
  <style>
    * {
      box-sizing: border-box;
    }
    
    body {
      font-family: "Segoe UI", -apple-system, BlinkMacSystemFont, sans-serif;
      background: #f8f9fa;
      color: #222;
      text-align: center;
      margin: 0;
      padding: 0;
      min-height: 100vh;
    }
    
    .container {
      max-width: 100%;
      padding: 10px;
    }
    
    h1 {
      margin: 15px 0 10px 0;
      color: #00695c;
      font-size: 1.5rem;
      padding: 0 10px;
    }
    
    .controls {
      margin: 15px auto;
      display: flex;
      flex-direction: column;
      gap: 10px;
      align-items: center;
      padding: 0 10px;
    }
    
    .select-group {
      display: flex;
      gap: 10px;
      width: 100%;
      max-width: 400px;
    }
    
    select, button {
      padding: 12px 15px;
      border: 1px solid #009688;
      border-radius: 8px;
      font-size: 16px;
      background: white;
      cursor: pointer;
      width: 100%;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
    }
    
    select {
      background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23009688' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right 12px center;
      background-size: 16px;
      padding-right: 40px;
    }
    
    .button-group {
      display: flex;
      gap: 10px;
      width: 100%;
      max-width: 400px;
    }
    
    button {
      background: #009688;
      color: white;
      border: none;
      transition: all 0.3s ease;
      font-weight: 600;
      flex: 1;
    }
    
    button:active {
      transform: scale(0.98);
      background: #00796b;
    }
    
    button:hover {
      background: #00796b;
    }
    
    button:disabled {
      background: #cccccc;
      cursor: not-allowed;
      transform: none;
    }
    
    #bildirimBtn.bildirim-acik {
      background: #d32f2f;
    }
    
    #bildirimBtn.bildirim-acik:active {
      background: #c62828;
    }
    
    .notification-status {
      margin: 8px 0;
      font-size: 14px;
      color: #666;
      padding: 0 10px;
    }
    
    .notification-status.acik {
      color: #388e3c;
      font-weight: bold;
    }
    
    .location-info {
      margin: 10px auto;
      font-size: 14px;
      color: #555;
      padding: 0 15px;
      line-height: 1.4;
    }
    
    .current-prayer {
      margin: 15px auto;
      padding: 20px 15px;
      background: linear-gradient(135deg, #009688, #00695c);
      color: white;
      border-radius: 12px;
      max-width: 400px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.15);
    }
    
    .current-prayer h2 {
      margin: 0 0 12px 0;
      font-size: 16px;
      font-weight: 600;
    }
    
    .current-prayer .prayer-name {
      font-size: 22px;
      font-weight: bold;
      margin: 8px 0;
    }
    
    .current-prayer .time-left {
      font-size: 15px;
      margin-top: 12px;
      opacity: 0.95;
      line-height: 1.4;
    }
    
    .table-container {
      overflow-x: auto;
      margin: 15px 10px;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      background: white;
      min-width: 300px;
    }
    
    th, td {
      padding: 14px 16px;
      border-bottom: 1px solid #e0e0e0;
      text-align: center;
    }
    
    th {
      background: #009688;
      color: white;
      font-weight: 600;
      position: sticky;
      top: 0;
    }
    
    tr.current {
      background: #e0f2f1 !important;
      font-weight: bold;
      color: #00695c;
    }
    
    tr:nth-child(even) {
      background: #f8f8f8;
    }
    
    tr:last-child td {
      border-bottom: none;
    }
    
    footer {
      margin: 20px 0 0 0;
      padding: 20px 15px;
      background: #009688;
      color: white;
      font-style: italic;
      line-height: 1.5;
    }
    
    /* Mobil için özel stiller */
    @media (min-width: 768px) {
      .container {
        max-width: 600px;
        margin: 0 auto;
      }
      
      .controls {
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
      }
      
      .select-group {
        max-width: 300px;
      }
      
      .button-group {
        max-width: 300px;
      }
      
      h1 {
        font-size: 2rem;
        margin: 20px 0 15px 0;
      }
      
      .current-prayer {
        padding: 25px 20px;
      }
      
      .current-prayer h2 {
        font-size: 18px;
      }
      
      .current-prayer .prayer-name {
        font-size: 26px;
      }
    }
    
    @media (max-width: 380px) {
      .select-group, .button-group {
        flex-direction: column;
      }
      
      select, button {
        font-size: 14px;
        padding: 10px 12px;
      }
      
      th, td {
        padding: 12px 10px;
        font-size: 14px;
      }
    }
    
    /* Yükleniyor animasyonu */
    .loading {
      opacity: 0.7;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>🕌 Namaz Vakitleri</h1>
    
    <div class="controls">
      <div class="select-group">
        <select id="ulkeSelect">
          <option value="Turkey">Türkiye</option>
          <option value="Germany">Almanya</option>
          <option value="France">Fransa</option>
          <option value="USA">Amerika</option>
        </select>
        
        <select id="sehirSelect">
          <!-- Türkiye şehirleri -->
          <option value="Adana">Adana</option>
          <option value="Adıyaman">Adıyaman</option>
          <option value="Afyonkarahisar">Afyonkarahisar</option>
          <option value="Ağrı">Ağrı</option>
          <option value="Aksaray">Aksaray</option>
          <option value="Amasya">Amasya</option>
          <option value="Ankara">Ankara</option>
          <option value="Antalya">Antalya</option>
          <option value="Ardahan">Ardahan</option>
          <option value="Artvin">Artvin</option>
          <option value="Aydın">Aydın</option>
          <option value="Balıkesir">Balıkesir</option>
          <option value="Bartın">Bartın</option>
          <option value="Batman">Batman</option>
          <option value="Bayburt">Bayburt</option>
          <option value="Bilecik">Bilecik</option>
          <option value="Bingöl">Bingöl</option>
          <option value="Bitlis">Bitlis</option>
          <option value="Bolu">Bolu</option>
          <option value="Burdur">Burdur</option>
          <option value="Bursa">Bursa</option>
          <option value="Çanakkale">Çanakkale</option>
          <option value="Çankırı">Çankırı</option>
          <option value="Çorum">Çorum</option>
          <option value="Denizli">Denizli</option>
          <option value="Diyarbakır">Diyarbakır</option>
          <option value="Düzce">Düzce</option>
          <option value="Edirne">Edirne</option>
          <option value="Elazığ">Elazığ</option>
          <option value="Erzincan">Erzincan</option>
          <option value="Erzurum">Erzurum</option>
          <option value="Eskişehir">Eskişehir</option>
          <option value="Gaziantep">Gaziantep</option>
          <option value="Giresun">Giresun</option>
          <option value="Gümüşhane">Gümüşhane</option>
          <option value="Hakkari">Hakkari</option>
          <option value="Hatay">Hatay</option>
          <option value="Iğdır" selected>Iğdır</option>
          <option value="Isparta">Isparta</option>
          <option value="İstanbul">İstanbul</option>
          <option value="İzmir">İzmir</option>
          <option value="Kahramanmaraş">Kahramanmaraş</option>
          <option value="Karabük">Karabük</option>
          <option value="Karaman">Karaman</option>
          <option value="Kars">Kars</option>
          <option value="Kastamonu">Kastamonu</option>
          <option value="Kayseri">Kayseri</option>
          <option value="Kırıkkale">Kırıkkale</option>
          <option value="Kırklareli">Kırklareli</option>
          <option value="Kırşehir">Kırşehir</option>
          <option value="Kilis">Kilis</option>
          <option value="Kocaeli">Kocaeli</option>
          <option value="Konya">Konya</option>
          <option value="Kütahya">Kütahya</option>
          <option value="Malatya">Malatya</option>
          <option value="Manisa">Manisa</option>
          <option value="Mardin">Mardin</option>
          <option value="Mersin">Mersin</option>
          <option value="Muğla">Muğla</option>
          <option value="Muş">Muş</option>
          <option value="Nevşehir">Nevşehir</option>
          <option value="Niğde">Niğde</option>
          <option value="Ordu">Ordu</option>
          <option value="Osmaniye">Osmaniye</option>
          <option value="Rize">Rize</option>
          <option value="Sakarya">Sakarya</option>
          <option value="Samsun">Samsun</option>
          <option value="Siirt">Siirt</option>
          <option value="Sinop">Sinop</option>
          <option value="Sivas">Sivas</option>
          <option value="Şanlıurfa">Şanlıurfa</option>
          <option value="Şırnak">Şırnak</option>
          <option value="Tekirdağ">Tekirdağ</option>
          <option value="Tokat">Tokat</option>
          <option value="Trabzon">Trabzon</option>
          <option value="Tunceli">Tunceli</option>
          <option value="Uşak">Uşak</option>
          <option value="Van">Van</option>
          <option value="Yalova">Yalova</option>
          <option value="Yozgat">Yozgat</option>
          <option value="Zonguldak">Zonguldak</option>
        </select>
      </div>
      
      <div class="button-group">
        <button id="vakitGetirBtn">Vakitleri Getir</button>
        <button id="konumBtn">Konumumu Kullan</button>
        <button id="bildirimBtn">Bildirimleri Aç</button>
      </div>
    </div>
    
    <div class="notification-status" id="bildirimDurum">
      Bildirimler: Kapalı
    </div>
    
    <div class="location-info" id="konumBilgi">
      Şehir: Iğdır, Ülke: Türkiye
    </div>
    
    <div class="current-prayer" id="suankiVakit" style="display: none;">
      <h2>🕋 Şu Anki Vakit</h2>
      <div class="prayer-name" id="vakitAdi">-</div>
      <div class="time-left" id="kalanSure">-</div>
    </div>
    
    <div class="table-container">
      <table id="vakitler">
        <tr><th>Vakit</th><th>Saat</th></tr>
      </table>
    </div>
    
    <footer id="ayet"></footer>
  </div>

  <script>
    // Değişkenler
    let bildirimAktif = false;
    let zamanlayicilar = [];
    let suankiVakitTimer = null;
    let namazVakitleri = {};

    // Türkçe isim eşleştirmesi
    const ceviri = {
      "Fajr": "İmsak",
      "Sunrise": "Güneş",
      "Dhuhr": "Öğle",
      "Asr": "İkindi",
      "Maghrib": "Akşam",
      "Isha": "Yatsı"
    };

    // Vakit sıralaması
    const vakitSirasi = ["İmsak", "Güneş", "Öğle", "İkindi", "Akşam", "Yatsı"];

    // Rasgele ayetler
    const ayetler = [
      "“Şüphesiz ki namaz, müminlere vakitleri belirlenmiş bir farzdır.” (Nisâ, 103)",
      "“Ey iman edenler! Sabır ve namazla yardım dileyin. Allah sabredenlerle beraberdir.” (Bakara, 153)",
      "“Namazı dosdoğru kılın, zekâtı verin ve rükû edenlerle beraber rükû edin.” (Bakara, 43)",
      "“Rabbini sabah akşam zikret, namazda dosdoğru ol.” (Müzzemmil, 8)",
      "“Secde et ve Rabbine yaklaş.” (Alak, 19)"
    ];

    // Ülkelere göre şehirler
    const sehirler = {
      "Turkey": [
        "Adana", "Adıyaman", "Afyonkarahisar", "Ağrı", "Aksaray", "Amasya", "Ankara", "Antalya", 
        "Ardahan", "Artvin", "Aydın", "Balıkesir", "Bartın", "Batman", "Bayburt", "Bilecik", 
        "Bingöl", "Bitlis", "Bolu", "Burdur", "Bursa", "Çanakkale", "Çankırı", "Çorum", 
        "Denizli", "Diyarbakır", "Düzce", "Edirne", "Elazığ", "Erzincan", "Erzurum", "Eskişehir", 
        "Gaziantep", "Giresun", "Gümüşhane", "Hakkari", "Hatay", "Iğdır", "Isparta", "İstanbul", 
        "İzmir", "Kahramanmaraş", "Karabük", "Karaman", "Kars", "Kastamonu", "Kayseri", "Kırıkkale", 
        "Kırklareli", "Kırşehir", "Kilis", "Kocaeli", "Konya", "Kütahya", "Malatya", "Manisa", 
        "Mardin", "Mersin", "Muğla", "Muş", "Nevşehir", "Niğde", "Ordu", "Osmaniye", "Rize", 
        "Sakarya", "Samsun", "Siirt", "Sinop", "Sivas", "Şanlıurfa", "Şırnak", "Tekirdağ", 
        "Tokat", "Trabzon", "Tunceli", "Uşak", "Van", "Yalova", "Yozgat", "Zonguldak"
      ],
      "Germany": [
        "Berlin", "Munich", "Hamburg", "Cologne", "Frankfurt", "Stuttgart", "Düsseldorf", 
        "Dortmund", "Essen", "Leipzig", "Bremen", "Dresden", "Hannover", "Nuremberg"
      ],
      "France": [
        "Paris", "Marseille", "Lyon", "Toulouse", "Nice", "Nantes", "Strasbourg", "Montpellier", 
        "Bordeaux", "Lille", "Rennes", "Reims", "Le Havre", "Saint-Étienne"
      ],
      "USA": [
        "New York", "Los Angeles", "Chicago", "Houston", "Phoenix", "Philadelphia", "San Antonio", 
        "San Diego", "Dallas", "San Jose", "Austin", "Jacksonville", "Fort Worth", "Columbus"
      ]
    };

    // Footer'da rasgele ayet
    document.getElementById("ayet").innerText = ayetler[Math.floor(Math.random() * ayetler.length)];

    // Elementleri seç
    const ulkeSelect = document.getElementById('ulkeSelect');
    const sehirSelect = document.getElementById('sehirSelect');
    const vakitGetirBtn = document.getElementById('vakitGetirBtn');
    const konumBtn = document.getElementById('konumBtn');
    const bildirimBtn = document.getElementById('bildirimBtn');
    const bildirimDurum = document.getElementById('bildirimDurum');
    const konumBilgi = document.getElementById('konumBilgi');
    const suankiVakitDiv = document.getElementById('suankiVakit');
    const vakitAdi = document.getElementById('vakitAdi');
    const kalanSure = document.getElementById('kalanSure');
    const container = document.querySelector('.container');

    // Sayfa yüklendiğinde ilk ayarları yap
    window.addEventListener('load', function() {
      // Iğdır'ı seçili yap
      sehirSelect.value = "Iğdır";
      // Vakitleri getir
      vakitleriGetir('Turkey', 'Iğdır');
      // Bildirim iznini kontrol et
      bildirimIzniniKontrolEt();
    });

    // Ülke değiştiğinde şehirleri güncelle
    ulkeSelect.addEventListener('change', function() {
      const ulke = this.value;
      sehirleriGuncelle(ulke);
    });

    // Şehirleri güncelle fonksiyonu
    function sehirleriGuncelle(ulke) {
      const sehirListesi = sehirler[ulke] || [];
      
      // Şehir select'ini temizle
      sehirSelect.innerHTML = '';
      
      // Yeni şehirleri ekle
      sehirListesi.forEach(sehir => {
        const option = document.createElement('option');
        option.value = sehir;
        option.textContent = sehir;
        sehirSelect.appendChild(option);
      });
      
      // İlk şehir için vakitleri getir
      if (sehirListesi.length > 0) {
        vakitleriGetir(ulke, sehirListesi[0]);
      }
    }

    // Bildirim iznini kontrol et
    function bildirimIzniniKontrolEt() {
      if ("Notification" in window) {
        if (Notification.permission === "granted") {
          bildirimAktif = true;
          bildirimBtn.textContent = "Bildirimleri Kapat";
          bildirimBtn.classList.add('bildirim-acik');
          bildirimDurum.textContent = "Bildirimler: Açık";
          bildirimDurum.classList.add('acik');
        } else {
          bildirimAktif = false;
          bildirimBtn.textContent = "Bildirimleri Aç";
          bildirimBtn.classList.remove('bildirim-acik');
          bildirimDurum.textContent = "Bildirimler: Kapalı";
          bildirimDurum.classList.remove('acik');
        }
      }
    }

    // Event listener'lar
    bildirimBtn.addEventListener('click', toggleBildirim);
    vakitGetirBtn.addEventListener('click', () => vakitleriGetir(ulkeSelect.value, sehirSelect.value));
    konumBtn.addEventListener('click', konumdanVakitGetir);

    // Yükleniyor durumu
    function setLoading(isLoading) {
      if (isLoading) {
        container.classList.add('loading');
      } else {
        container.classList.remove('loading');
      }
    }

    // Konumdan vakit getirme
    function konumdanVakitGetir() {
      if (!navigator.geolocation) {
        alert("Tarayıcınız konum özelliğini desteklemiyor.");
        return;
      }

      konumBtn.disabled = true;
      konumBtn.textContent = "Konum Alınıyor...";
      setLoading(true);

      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const { latitude, longitude } = position.coords;
          try {
            // Konumu şehir ismine çevir
            const response = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=tr`);
            const locationData = await response.json();
            
            let sehir = locationData.city || locationData.locality || "Bilinmeyen";
            const ulke = locationData.countryName || "Bilinmeyen";
            
            // API için ülke kodu eşleştirme
            const ulkeKodlari = {
              "Türkiye": "Turkey",
              "Germany": "Germany",
              "Almanya": "Germany",
              "France": "France",
              "Fransa": "France",
              "United States": "USA",
              "Amerika Birleşik Devletleri": "USA"
            };
            
            const ulkeKodu = ulkeKodlari[ulke] || ulke;
            
            // Select'leri güncelle
            ulkeSelect.value = ulkeKodu;
            
            // Şehir select'ini güncelle
            sehirleriGuncelle(ulkeKodu);
            
            // Konumdaki şehri bul ve seç
            const sehirListesi = sehirler[ulkeKodu] || [];
            let konumdakiSehir = sehirListesi.find(s => 
              s.toLowerCase().includes(sehir.toLowerCase()) || 
              sehir.toLowerCase().includes(s.toLowerCase())
            );
            
            if (!konumdakiSehir && sehirListesi.length > 0) {
              konumdakiSehir = sehirListesi[0];
            }
            
            if (konumdakiSehir) {
              sehirSelect.value = konumdakiSehir;
              sehir = konumdakiSehir;
            }
            
            // Vakitleri getir
            await vakitleriGetir(ulkeKodu, sehir);
            
            konumBilgi.textContent = `Konum: ${sehir}, ${ulke}`;
            
          } catch (error) {
            console.error("Konum hatası:", error);
            alert("Konum bilgisi alınamadı. Lütfen manuel olarak şehir seçin.");
          } finally {
            konumBtn.disabled = false;
            konumBtn.textContent = "Konumumu Kullan";
            setLoading(false);
          }
        },
        (error) => {
          console.error("Konum izin hatası:", error);
          alert("Konum erişim izni verilmedi. Lütfen tarayıcı ayarlarından izin verin.");
          konumBtn.disabled = false;
          konumBtn.textContent = "Konumumu Kullan";
          setLoading(false);
        },
        {
          enableHighAccuracy: true,
          timeout: 15000,
          maximumAge: 60000
        }
      );
    }

    // Bildirim aç/kapat - MOBİL UYUMLU
    function toggleBildirim() {
      if (!bildirimAktif) {
        // Bildirim açma
        if ("Notification" in window) {
          // Mobil tarayıcılar için özel işlem
          if (typeof Notification.requestPermission === "function") {
            Notification.requestPermission().then(permission => {
              if (permission === "granted") {
                bildirimAktif = true;
                bildirimBtn.textContent = "Bildirimleri Kapat";
                bildirimBtn.classList.add('bildirim-acik');
                bildirimDurum.textContent = "Bildirimler: Açık";
                bildirimDurum.classList.add('acik');
                zamanlayicilariAyarla();
                
                // Mobil için test bildirimi göster
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  new Notification("Namaz Vakitleri", {
                    body: "Bildirimler başarıyla açıldı!",
                    icon: "https://upload.wikimedia.org/wikipedia/commons/6/6b/Mosque_icon.png",
                    tag: "test"
                  });
                }
              } else if (permission === "denied") {
                alert("Bildirim izni tarayıcı ayarlarından engellenmiş. Lütfen tarayıcı ayarlarınızdan bildirim iznini açın.");
              } else {
                alert("Bildirim izni verilmedi. Lütfen izin vererek tekrar deneyin.");
              }
            }).catch(error => {
              console.error("Bildirim hatası:", error);
              alert("Bildirim ayarlanırken bir hata oluştu: " + error.message);
            });
          }
        } else {
          alert("Bu tarayıcı bildirimleri desteklemiyor.");
        }
      } else {
        // Bildirim kapatma
        bildirimAktif = false;
        bildirimBtn.textContent = "Bildirimleri Aç";
        bildirimBtn.classList.remove('bildirim-acik');
        bildirimDurum.textContent = "Bildirimler: Kapalı";
        bildirimDurum.classList.remove('acik');
        zamanlayicilariTemizle();
      }
    }

    // Vakitleri getir
    async function vakitleriGetir(ulke, sehir) {
      try {
        vakitGetirBtn.disabled = true;
        vakitGetirBtn.textContent = "Yükleniyor...";
        setLoading(true);

        const response = await fetch(`https://api.aladhan.com/v1/timingsByCity?city=${encodeURIComponent(sehir)}&country=${encodeURIComponent(ulke)}&method=13`);
        const data = await response.json();
        
        if (data.code === 200) {
          namazVakitleri = data.data.timings;
          tabloyuGuncelle();
          konumBilgi.textContent = `Şehir: ${sehir}, Ülke: ${ulkeSelect.options[ulkeSelect.selectedIndex].text}`;
          suankiVaktiGuncelle();
          zamanlayicilariAyarla();
        } else {
          throw new Error("API hatası");
        }
      } catch (error) {
        alert("Vakitler alınamadı: " + error.message);
      } finally {
        vakitGetirBtn.disabled = false;
        vakitGetirBtn.textContent = "Vakitleri Getir";
        setLoading(false);
      }
    }

    // Tabloyu güncelle
    function tabloyuGuncelle() {
      const table = document.getElementById("vakitler");
      // Mevcut satırları temizle (başlık hariç)
      while (table.rows.length > 1) {
        table.deleteRow(1);
      }

      for (const [key, value] of Object.entries(namazVakitleri)) {
        if (ceviri[key]) {
          const row = document.createElement("tr");
          row.innerHTML = `<td>${ceviri[key]}</td><td>${value}</td>`;
          row.id = `row-${ceviri[key]}`;
          table.appendChild(row);
        }
      }
    }

    // Şu anki vakti güncelle
    function suankiVaktiGuncelle() {
      if (suankiVakitTimer) {
        clearInterval(suankiVakitTimer);
      }

      function hesaplaVeGoster() {
        const simdi = new Date();
        const suankiSaat = simdi.getHours().toString().padStart(2, '0') + ':' + 
                          simdi.getMinutes().toString().padStart(2, '0');

        let suankiVakit = null;
        let sonrakiVakit = null;
        let sonrakiVakitSaat = null;

        // Vakitleri kontrol et
        for (let i = 0; i < vakitSirasi.length; i++) {
          const vakit = vakitSirasi[i];
          const vakitSaat = Object.entries(namazVakitleri).find(([key, val]) => ceviri[key] === vakit)?.[1];
          
          if (vakitSaat) {
            if (suankiSaat < vakitSaat) {
              sonrakiVakit = vakit;
              sonrakiVakitSaat = vakitSaat;
              break;
            } else {
              suankiVakit = vakit;
            }
          }
        }

        // Gece yatsıdan imsaka kadar
        if (!sonrakiVakit) {
          sonrakiVakit = "İmsak";
          sonrakiVakitSaat = namazVakitleri.Fajr;
        }

        // Tabloyu güncelle
        document.querySelectorAll('#vakitler tr').forEach(tr => {
          tr.classList.remove('current');
        });
        if (suankiVakit) {
          document.getElementById(`row-${suankiVakit}`)?.classList.add('current');
        }

        // Şu anki vakit bilgisini göster
        if (suankiVakit) {
          suankiVakitDiv.style.display = 'block';
          vakitAdi.textContent = `${suankiVakit} Vakti`;
          
          // Kalan süreyi hesapla
          const [sonrakiSaat, sonrakiDakika] = sonrakiVakitSaat.split(':').map(Number);
          const sonrakiZaman = new Date();
          sonrakiZaman.setHours(sonrakiSaat, sonrakiDakika, 0, 0);
          
          if (sonrakiZaman < simdi) {
            sonrakiZaman.setDate(sonrakiZaman.getDate() + 1);
          }
          
          const kalanMs = sonrakiZaman - simdi;
          const kalanDakika = Math.floor(kalanMs / (1000 * 60));
          const kalanSaat = Math.floor(kalanDakika / 60);
          const kalanDakikaMod = kalanDakika % 60;
          
          if (kalanSaat > 0) {
            kalanSure.textContent = `Sonraki vakit (${sonrakiVakit}): ${kalanSaat}sa ${kalanDakikaMod}dakika`;
          } else {
            kalanSure.textContent = `Sonraki vakit (${sonrakiVakit}): ${kalanDakikaMod}dakika`;
          }
        } else {
          suankiVakitDiv.style.display = 'none';
        }
      }

      hesaplaVeGoster();
      suankiVakitTimer = setInterval(hesaplaVeGoster, 60000);
    }

    // Zamanlayıcıları ayarla
    function zamanlayicilariAyarla() {
      if (!bildirimAktif) return;
      
      zamanlayicilariTemizle();

      for (const [key, value] of Object.entries(namazVakitleri)) {
        if (ceviri[key]) {
          scheduleNotification(ceviri[key], value);
        }
      }
    }

    // Zamanlayıcıları temizle
    function zamanlayicilariTemizle() {
      zamanlayicilar.forEach(timer => clearTimeout(timer));
      zamanlayicilar = [];
    }

    // Bildirim planlama
    function scheduleNotification(vakitAdi, saat) {
      const [h, m] = saat.split(":").map(Number);
      const now = new Date();
      const target = new Date();
      target.setHours(h, m, 0, 0);

      if (target < now) {
        target.setDate(target.getDate() + 1);
      }

      const ms = target - now;
      const timer = setTimeout(() => {
        if (Notification.permission === "granted" && bildirimAktif) {
          new Notification("Namaz Vakti", {
            body: `${vakitAdi} vakti girdi.`,
            icon: "https://upload.wikimedia.org/wikipedia/commons/6/6b/Mosque_icon.png",
            tag: vakitAdi
          });
        }
        
        // Tekrar zamanla (ertesi gün için)
        scheduleNotification(vakitAdi, saat);
      }, ms);

      zamanlayicilar.push(timer);
    }

    // Mobil için touch event iyileştirmeleri
    document.addEventListener('touchstart', function() {}, {passive: true});
  </script>
</body>
</html>
